import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Shield, 
  Upload, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  File, 
  Scan,
  Activity,
  Database,
  Eye,
  Trash2,
  Play,
  Square,
  Filter,
  Search
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';

// Mock malware signatures database
const _MALWARE_SIGNATURES = [
  { name: 'Trojan.Win32.GenKryptor', hash: 'a1b2c3d4e5f6...', severity: 'critical' },
  { name: 'Backdoor.Generic.445', hash: 'f6e5d4c3b2a1...', severity: 'high' },
  { name: 'Ransomware.WannaCry', hash: '123abc456def...', severity: 'critical' },
  { name: 'Spyware.Keylogger', hash: 'def456abc123...', severity: 'medium' },
  { name: 'Adware.BrowserHijack', hash: '789xyz012uvw...', severity: 'low' }
];

const _SUSPICIOUS_EXTENSIONS = ['.exe', '.scr', '.bat', '.cmd', '.pif', '.com', '.jar', '.vbs', '.js'];

// Generate mock upload attempts
const generateUploadAttempt = () => {
  const fileTypes = ['.exe', '.pdf', '.docx', '.jpg', '.zip', '.rar', '.bat', '.scr', '.dll', '.sys'];
  const sources = ['192.168.1.45', '10.0.0.23', '172.16.0.8', '203.0.113.42', '198.51.100.15'];
  const fileNames = ['document', 'image', 'setup', 'installer', 'update', 'patch', 'system', 'backup'];
  
  const extension = fileTypes[Math.floor(Math.random() * fileTypes.length)];
  const fileName = fileNames[Math.floor(Math.random() * fileNames.length)] + extension;
  const isMalicious = Math.random() < 0.3; // 30% chance of malware
  const size = Math.floor(Math.random() * 50000) + 1000;
  
  return {
    id: Date.now() + Math.random(),
    fileName,
    fileSize: size,
    sourceIP: sources[Math.floor(Math.random() * sources.length)],
    timestamp: new Date(),
    hash: Math.random().toString(36).substring(2, 15),
    status: isMalicious ? (Math.random() < 0.8 ? 'blocked' : 'quarantined') : 'safe',
    threatLevel: isMalicious ? 
      (Math.random() < 0.3 ? 'critical' : Math.random() < 0.5 ? 'high' : 'medium') : 'safe',
    scanTime: Math.floor(Math.random() * 5000) + 500,
    detectedThreats: isMalicious ? Math.floor(Math.random() * 3) + 1 : 0,
    malwareType: isMalicious ? 
      ['Trojan', 'Virus', 'Ransomware', 'Spyware', 'Adware'][Math.floor(Math.random() * 5)] : null
  };
};

// Custom hook for malware simulation
const useMalwareSimulation = () => {
  const [isActive, setIsActive] = useState(false);
  const [uploadAttempts, setUploadAttempts] = useState([]);
  const [stats, setStats] = useState({
    totalUploads: 0,
    blockedFiles: 0,
    quarantinedFiles: 0,
    safeFiles: 0,
    activeScan: false
  });

  useEffect(() => {
    let interval;
    if (isActive) {
      interval = setInterval(() => {
        const newAttempt = generateUploadAttempt();
        setUploadAttempts(prev => [newAttempt, ...prev.slice(0, 49)]);
        
        setStats(prev => ({
          ...prev,
          totalUploads: prev.totalUploads + 1,
          blockedFiles: prev.blockedFiles + (newAttempt.status === 'blocked' ? 1 : 0),
          quarantinedFiles: prev.quarantinedFiles + (newAttempt.status === 'quarantined' ? 1 : 0),
          safeFiles: prev.safeFiles + (newAttempt.status === 'safe' ? 1 : 0),
          activeScan: Math.random() < 0.3
        }));
      }, 2000 + Math.random() * 3000);
    }
    return () => clearInterval(interval);
  }, [isActive]);

  return { isActive, setIsActive, uploadAttempts, stats, setUploadAttempts };
};

const MalwareUploadSimulation = () => {
  const { isActive, setIsActive, uploadAttempts, stats, setUploadAttempts } = useMalwareSimulation();
  const [selectedFile, setSelectedFile] = useState(null);
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showDetails, setShowDetails] = useState(false);

  // Generate chart data
  const hourlyData = Array.from({ length: 24 }, (_, i) => ({
    hour: `${i}:00`,
    uploads: Math.floor(Math.random() * 50) + 10,
    malware: Math.floor(Math.random() * 15) + 2
  }));

  const threatDistribution = [
    { name: 'Safe Files', value: stats.safeFiles, color: '#10b981' },
    { name: 'Blocked', value: stats.blockedFiles, color: '#ef4444' },
    { name: 'Quarantined', value: stats.quarantinedFiles, color: '#f59e0b' }
  ];

  const fileTypeStats = [
    { type: '.exe', count: 45, malware: 32 },
    { type: '.zip', count: 28, malware: 8 },
    { type: '.pdf', count: 67, malware: 2 },
    { type: '.docx', count: 34, malware: 5 },
    { type: '.jpg', count: 89, malware: 0 }
  ];

  const filteredAttempts = uploadAttempts.filter(attempt => {
    const matchesStatus = filterStatus === 'all' || attempt.status === filterStatus;
    const matchesSearch = attempt.fileName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         attempt.sourceIP.includes(searchTerm);
    return matchesStatus && matchesSearch;
  });

  const getThreatColor = (level) => {
    switch (level) {
      case 'critical': return 'text-red-400 bg-red-900/30';
      case 'high': return 'text-orange-400 bg-orange-900/30';
      case 'medium': return 'text-yellow-400 bg-yellow-900/30';
      case 'low': return 'text-blue-400 bg-blue-900/30';
      default: return 'text-green-400 bg-green-900/30';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'blocked': return 'text-red-400 bg-red-900/30';
      case 'quarantined': return 'text-orange-400 bg-orange-900/30';
      case 'safe': return 'text-green-400 bg-green-900/30';
      default: return 'text-gray-400 bg-gray-900/30';
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      {/* Header */}
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Shield className="h-8 w-8 text-orange-400" />
            <div>
              <h1 className="text-3xl font-bold">Malware Upload Simulation</h1>
              <p className="text-gray-400">File scanning and threat detection system</p>
            </div>
          </div>
          
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => setIsActive(!isActive)}
            className={`px-6 py-3 rounded-lg font-semibold flex items-center space-x-2 ${
              isActive 
                ? 'bg-red-600 hover:bg-red-700 text-white' 
                : 'bg-green-600 hover:bg-green-700 text-white'
            }`}
          >
            {isActive ? <Square className="h-4 w-4" /> : <Play className="h-4 w-4" />}
            <span>{isActive ? 'Stop Simulation' : 'Start Simulation'}</span>
          </motion.button>
        </div>
      </motion.div>

      {/* Status Banner */}
      <AnimatePresence>
        {isActive && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="mb-6 bg-gradient-to-r from-orange-900/50 to-red-900/50 border border-orange-500/30 rounded-lg p-4"
          >
            <div className="flex items-center space-x-3">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
              >
                <Scan className="h-6 w-6 text-orange-400" />
              </motion.div>
              <div>
                <h3 className="font-semibold text-orange-400">Malware Detection System Active</h3>
                <p className="text-gray-300">Monitoring file uploads and scanning for threats...</p>
              </div>
              {stats.activeScan && (
                <motion.div
                  animate={{ opacity: [1, 0.5, 1] }}
                  transition={{ duration: 1, repeat: Infinity }}
                  className="ml-auto flex items-center space-x-2 text-yellow-400"
                >
                  <Activity className="h-4 w-4" />
                  <span className="text-sm">Deep Scan Active</span>
                </motion.div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        {[
          { 
            title: 'Total Uploads', 
            value: stats.totalUploads, 
            icon: Upload, 
            color: 'text-blue-400',
            bgColor: 'bg-blue-900/30' 
          },
          { 
            title: 'Blocked Files', 
            value: stats.blockedFiles, 
            icon: XCircle, 
            color: 'text-red-400',
            bgColor: 'bg-red-900/30' 
          },
          { 
            title: 'Quarantined', 
            value: stats.quarantinedFiles, 
            icon: AlertTriangle, 
            color: 'text-orange-400',
            bgColor: 'bg-orange-900/30' 
          },
          { 
            title: 'Safe Files', 
            value: stats.safeFiles, 
            icon: CheckCircle, 
            color: 'text-green-400',
            bgColor: 'bg-green-900/30' 
          }
        ].map((stat, index) => (
          <motion.div
            key={stat.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className={`${stat.bgColor} rounded-lg p-6 border border-gray-700`}
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">{stat.title}</p>
                <motion.p 
                  key={stat.value}
                  initial={{ scale: 1.2 }}
                  animate={{ scale: 1 }}
                  className={`text-2xl font-bold ${stat.color}`}
                >
                  {stat.value}
                </motion.p>
              </div>
              <stat.icon className={`h-8 w-8 ${stat.color}`} />
            </div>
          </motion.div>
        ))}
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        {/* Upload Frequency Chart */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          className="bg-gray-800 rounded-lg p-6 border border-gray-700"
        >
          <h3 className="text-xl font-semibold mb-4 flex items-center space-x-2">
            <Activity className="h-5 w-5 text-blue-400" />
            <span>Upload Frequency (24h)</span>
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={hourlyData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="hour" stroke="#9ca3af" />
              <YAxis stroke="#9ca3af" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1f2937', 
                  border: '1px solid #374151',
                  borderRadius: '8px'
                }} 
              />
              <Line type="monotone" dataKey="uploads" stroke="#3b82f6" strokeWidth={2} />
              <Line type="monotone" dataKey="malware" stroke="#ef4444" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </motion.div>

        {/* Threat Distribution */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          className="bg-gray-800 rounded-lg p-6 border border-gray-700"
        >
          <h3 className="text-xl font-semibold mb-4 flex items-center space-x-2">
            <Database className="h-5 w-5 text-green-400" />
            <span>Threat Distribution</span>
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={threatDistribution}
                cx="50%"
                cy="50%"
                outerRadius={100}
                dataKey="value"
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
              >
                {threatDistribution.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </motion.div>
      </div>

      {/* File Type Analysis */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gray-800 rounded-lg p-6 border border-gray-700 mb-8"
      >
        <h3 className="text-xl font-semibold mb-4 flex items-center space-x-2">
          <File className="h-5 w-5 text-purple-400" />
          <span>File Type Analysis</span>
        </h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={fileTypeStats}>
            <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
            <XAxis dataKey="type" stroke="#9ca3af" />
            <YAxis stroke="#9ca3af" />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: '#1f2937', 
                border: '1px solid #374151',
                borderRadius: '8px'
              }} 
            />
            <Bar dataKey="count" fill="#8b5cf6" />
            <Bar dataKey="malware" fill="#ef4444" />
          </BarChart>
        </ResponsiveContainer>
      </motion.div>

      {/* Upload Attempts Table */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gray-800 rounded-lg border border-gray-700"
      >
        <div className="p-6 border-b border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-semibold flex items-center space-x-2">
              <Eye className="h-5 w-5 text-cyan-400" />
              <span>Recent Upload Attempts</span>
            </h3>
            <button
              onClick={() => setUploadAttempts([])}
              className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg flex items-center space-x-2"
            >
              <Trash2 className="h-4 w-4" />
              <span>Clear Logs</span>
            </button>
          </div>
          
          {/* Filters */}
          <div className="flex flex-wrap gap-4">
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-400" />
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded px-3 py-1"
              >
                <option value="all">All Status</option>
                <option value="safe">Safe</option>
                <option value="blocked">Blocked</option>
                <option value="quarantined">Quarantined</option>
              </select>
            </div>
            
            <div className="flex items-center space-x-2">
              <Search className="h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search files or IPs..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded px-3 py-1"
              />
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-700">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                  File
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                  Source IP
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                  Threat Level
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                  Scan Time
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
              <AnimatePresence>
                {filteredAttempts.map((attempt) => (
                  <motion.tr
                    key={attempt.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    className="hover:bg-gray-700/50"
                  >
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-3">
                        <File className="h-4 w-4 text-gray-400" />
                        <div>
                          <div className="text-sm font-medium text-white">{attempt.fileName}</div>
                          <div className="text-sm text-gray-400">{(attempt.fileSize / 1024).toFixed(1)} KB</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                      {attempt.sourceIP}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(attempt.status)}`}>
                        {attempt.status.toUpperCase()}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getThreatColor(attempt.threatLevel)}`}>
                        {attempt.threatLevel.toUpperCase()}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                      {attempt.scanTime}ms
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onClick={() => {
                          setSelectedFile(attempt);
                          setShowDetails(true);
                        }}
                        className="text-cyan-400 hover:text-cyan-300 mr-3"
                      >
                        View Details
                      </button>
                    </td>
                  </motion.tr>
                ))}
              </AnimatePresence>
            </tbody>
          </table>
        </div>
      </motion.div>

      {/* File Details Modal */}
      <AnimatePresence>
        {showDetails && selectedFile && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
            onClick={() => setShowDetails(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-800 rounded-lg p-6 max-w-2xl w-full max-h-96 overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold">File Analysis Details</h3>
                <button
                  onClick={() => setShowDetails(false)}
                  className="text-gray-400 hover:text-white"
                >
                  ×
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm text-gray-400">File Name</label>
                    <p className="text-white font-medium">{selectedFile.fileName}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">File Size</label>
                    <p className="text-white font-medium">{(selectedFile.fileSize / 1024).toFixed(1)} KB</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">Source IP</label>
                    <p className="text-white font-medium">{selectedFile.sourceIP}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">Upload Time</label>
                    <p className="text-white font-medium">{selectedFile.timestamp.toLocaleTimeString()}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">File Hash (SHA-256)</label>
                    <p className="text-white font-mono text-sm">{selectedFile.hash}...</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-400">Scan Duration</label>
                    <p className="text-white font-medium">{selectedFile.scanTime}ms</p>
                  </div>
                </div>
                
                {selectedFile.detectedThreats > 0 && (
                  <div className="bg-red-900/30 border border-red-500/30 rounded-lg p-4">
                    <h4 className="text-red-400 font-semibold mb-2">⚠️ Threats Detected</h4>
                    <p className="text-gray-300">
                      <strong>{selectedFile.detectedThreats}</strong> threat(s) found
                    </p>
                    <p className="text-red-400">Type: {selectedFile.malwareType}</p>
                    <p className="text-gray-400 text-sm mt-2">
                      This file has been {selectedFile.status} and quarantined for further analysis.
                    </p>
                  </div>
                )}
                
                {selectedFile.status === 'safe' && (
                  <div className="bg-green-900/30 border border-green-500/30 rounded-lg p-4">
                    <h4 className="text-green-400 font-semibold mb-2">✅ File Clean</h4>
                    <p className="text-gray-300">No threats detected in this file.</p>
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Educational Footer */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5 }}
        className="mt-12 text-center text-gray-400 text-sm"
      >
        <p>🎓 Educational Cybersecurity Simulation</p>
        <p>Created by <strong>Nijat Najafov, Huseynli Murad, Elmin Nuriyev</strong> - Azerbaijan Technical University</p>
        <p className="mt-2 text-xs">
          This malware detection simulation demonstrates file scanning, threat analysis, and quarantine procedures
          used in enterprise security systems. All data is simulated for educational purposes.
        </p>
      </motion.div>
    </div>
  );
};

export default MalwareUploadSimulation;